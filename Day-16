LOWER BOUND AND UPPER BOUND:

class Main{
  public static int lowerBound(int[] arr, int key){
    int l = 0, r = arr.length;
    while(l<r){
      int mid = l + (r-l)/2;
      if(arr[mid]<k){
        l = mid+1;
      }else{
        r = mid;
      }
    }
    return l;
    //UPPER BOUND:
    while(l<=r){
      int mid = l + (r-l)/2;
      if(arr[mid]<k){
        l = mid+1;
      }else{
        r = mid;
      }
    }
    return l-1;
  }
}
import java.util.HashMap;

class Solution {
    public int numSubarraysWithSum(int[] nums, int goal) {
        // Map to store the frequency of prefix sums
        HashMap<Integer, Integer> prefixSumCount = new HashMap<>();
        prefixSumCount.put(0, 1);  // Base case: prefix sum 0 occurs once

        int sum = 0;
        int count = 0;

        for (int num : nums) {
            sum += num;

            // Check if there exists a prefix sum that when removed gives the desired goal
            if (prefixSumCount.containsKey(sum - goal)) {
                count += prefixSumCount.get(sum - goal);
            }

            // Store/update the current prefix sum
            prefixSumCount.put(sum, prefixSumCount.getOrDefault(sum, 0) + 1);
        }

        return count;
    }
}
