LINKED LIST CRUD OPERATIONS:

DELETE:
Deleting head node.
Deleting tail node.
Deleting of 
Nth node.
Deleting by value node.

INSERT:
Inserting head node.
Inserting tail node.
Inserting of Nth node.
Inserting by value node.

class Main {

    static Node convertArrayToLinkedlist(int[] arr) {
        if (arr.length == 0) return null;

        Node head = new Node(arr[0]);
        Node current = head;

        for (int i = 1; i < arr.length; i++) {
            Node temp = new Node(arr[i]);
            current.next = temp;
            current = temp;
        }

        return head;
    }

    static Node deleteNthNode(Node head, int n) {
        if (head == null || n <= 0) return head;

        if (n == 1) {
            // Delete the head node
            return head.next;
        }

        Node current = head;
        for (int i = 1; i < n - 1 && current.next != null; i++) {
            current = current.next;
        }

        if (current.next != null) {
            current.next = current.next.next;
        }

        return head;
    }

    static void print(Node head) {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + (temp.next != null ? "->" : "->null"));
            temp = temp.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};
        Node head = convertArrayToLinkedlist(arr);
        head = deleteNthNode(head, 4); // Delete 4th node
        print(head);
    }
}

class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }

    Node(int data, Node next) {
        this.data = data;
        this.next = next;
    }
}
Output:

1->2->3->4->5->null
